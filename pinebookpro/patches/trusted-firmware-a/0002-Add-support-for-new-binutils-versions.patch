From 701907b4c0e61fe35189ab8a9acf132887651932 Mon Sep 17 00:00:00 2001
From: Ryo Nakano <ryonakaknock3@gmail.com>
Date: Mon, 4 Nov 2024 19:45:08 +0900
Subject: [PATCH] Add support for new binutils versions

Backport of the following upstream commits:

- https://github.com/TrustedFirmware-A/trusted-firmware-a/commit/1f49db5f25cdd4e43825c9bcc0575070b80f628c
- https://github.com/TrustedFirmware-A/trusted-firmware-a/commit/86e489c1903c72b76c6ff3b3ff6b75774c132e59
---
 Makefile                     | 4 ++++
 make_helpers/build_macros.mk | 4 ++++
 2 files changed, 8 insertions(+)

diff --git a/Makefile b/Makefile
index f01a9ae3e..65a30b6f7 100644
--- a/Makefile
+++ b/Makefile
@@ -375,6 +375,7 @@ TF_LDFLAGS		+=	$(TF_LDFLAGS_$(ARCH))
 # LD = gcc (used when GCC LTO is enabled)
 else ifneq ($(findstring gcc,$(notdir $(LD))),)
 # Pass ld options with Wl or Xlinker switches
+TF_LDFLAGS		+=	$(call ld_option,-Xlinker --no-warn-rwx-segments)
 TF_LDFLAGS		+=	-Wl,--fatal-warnings -O1
 TF_LDFLAGS		+=	-Wl,--gc-sections
 ifeq ($(ENABLE_LTO),1)
@@ -392,6 +393,9 @@ TF_LDFLAGS		+=	$(subst --,-Xlinker --,$(TF_LDFLAGS_$(ARCH)))
 
 # LD = gcc-ld (ld) or llvm-ld (ld.lld) or other
 else
+# With ld.bfd version 2.39 and newer new warnings are added. Skip those since we
+# are not loaded by a elf loader.
+TF_LDFLAGS		+=	$(call ld_option, --no-warn-rwx-segments)
 TF_LDFLAGS		+=	--fatal-warnings -O1
 TF_LDFLAGS		+=	--gc-sections
 # ld.lld doesn't recognize the errata flags,
diff --git a/make_helpers/build_macros.mk b/make_helpers/build_macros.mk
index 1c3d14d05..cc40a30ac 100644
--- a/make_helpers/build_macros.mk
+++ b/make_helpers/build_macros.mk
@@ -67,6 +67,10 @@ $(foreach d,$(0-9),$(eval __numeric := $(subst $(d),,$(__numeric))))
 $(if $(__numeric),$(error $(1) must be numeric))
 endef
 
+# Convenience function to check for a given linker option. An call to
+# $(call ld_option, --no-XYZ) will return --no-XYZ if supported by the linker
+ld_option = $(shell $(LD) $(1) -Wl,--version >/dev/null 2>&1 || $(LD) $(1) -v >/dev/null 2>&1 && echo $(1))
+
 # CREATE_SEQ is a recursive function to create sequence of numbers from 1 to
 # $(2) and assign the sequence to $(1)
 define CREATE_SEQ
-- 
2.47.0

